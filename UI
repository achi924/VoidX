-- Instances:

local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local Topbar = Instance.new("Folder")
local TextLabel = Instance.new("TextLabel")
local item = Instance.new("Folder")
local ScrollingFrame = Instance.new("ScrollingFrame")
local UIListLayout = Instance.new("UIListLayout")
local Close = Instance.new("ImageButton") -- Fixed object type
local UIStroke = Instance.new("UIStroke")

local TweenService = game:GetService("TweenService")
local MarketplaceService = game:GetService("MarketplaceService")
local placeId = game.PlaceId
local gameName = "Unknown Game" -- ค่าตั้งต้น ถ้าดึงชื่อไม่ได้

-- พยายามดึงชื่อเกม
pcall(function()
    gameName = MarketplaceService:GetProductInfo(placeId).Name
end)

--Properties:

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.3, 0, -0.5, 0) -- เริ่มจากนอกจอ
Frame.Size = UDim2.new(0, 500, 0, 380)
Frame.Visible = false

UICorner.CornerRadius = UDim.new(0, 10)
UICorner.Parent = Frame

UIStroke.Parent = Frame
UIStroke.Thickness = 2
UIStroke.Color = Color3.fromRGB(50, 50, 50)

Topbar.Name = "Topbar"
Topbar.Parent = Frame

TextLabel.Parent = Topbar
TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
TextLabel.BackgroundTransparency = 1
TextLabel.Position = UDim2.new(0.5, 0, 0.04, 0)
TextLabel.Size = UDim2.new(0, 460, 0, 27)
TextLabel.Font = Enum.Font.FredokaOne
TextLabel.Text = gameName .. " Create By VoidX"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextSize = 18

item.Name = "item"
item.Parent = Frame

ScrollingFrame.Parent = item
ScrollingFrame.Active = true
ScrollingFrame.AnchorPoint = Vector2.new(0.5, 1)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.Position = UDim2.new(0.5, 0, 1, 0)
ScrollingFrame.Size = UDim2.new(0, 460, 0, 318)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 94)
ScrollingFrame.ScrollBarThickness = 2

UIListLayout.Parent = ScrollingFrame
UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 5)

-- Close Button
Close.Name = "Close"
Close.Parent = Topbar
Close.AnchorPoint = Vector2.new(0.5, 0.5)
Close.BackgroundTransparency = 1
Close.Position = UDim2.new(0.95, 0, 0.05, 0)
Close.Size = UDim2.new(0, 32, 0, 32)
Close.Image = "rbxassetid://6031094678"
Close.ImageColor3 = Color3.fromRGB(200, 50, 50)

Close.MouseEnter:Connect(function()
    game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {Size = UDim2.new(0, 36, 0, 36)}):Play()
end) 
Close.MouseLeave:Connect(function()
    game:GetService("TweenService"):Create(Close, TweenInfo.new(0.2), {Size = UDim2.new(0, 32, 0, 32)}):Play()
end)
Close.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

-- เมื่อกดปุ่มปิด ทำอนิเมชันยุบ UI ลงก่อนทำลาย
Close.MouseButton1Click:Connect(function()
    local tween = TweenService:Create(Frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Position = UDim2.new(0.3, 0, -0.5, 0)})
    tween:Play()
    tween.Completed:Wait() -- รอให้อนิเมชันเสร็จก่อนลบ
    ScreenGui:Destroy()
end)

-- แสดง UI ด้วย Tween
Frame.Visible = true
TweenService:Create(Frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0.3, 0, 0.2, 0)}):Play()


UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y)
end)

function dragify(Frame, object)
    dragToggle = nil
    dragSpeed = .25
    dragInput = nil
    dragStart = nil
    dragPos = nil
    function updateInput(input)
        Delta = input.Position - dragStart
        Position =
            UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
        game:GetService("TweenService"):Create(object, TweenInfo.new(dragSpeed), {Position = Position}):Play()
    end
    Frame.InputBegan:Connect(
        function(input)
            if
                (input.UserInputType == Enum.UserInputType.MouseButton1 or
                    input.UserInputType == Enum.UserInputType.Touch)
            then
                dragToggle = true
                dragStart = input.Position
                startPos = object.Position
                input.Changed:Connect(
                    function()
                        if (input.UserInputState == Enum.UserInputState.End) then
                            dragToggle = false
                        end
                    end
                )
            end
        end
    )
    Frame.InputChanged:Connect(
        function(input)
            if
                (input.UserInputType == Enum.UserInputType.MouseMovement or
                    input.UserInputType == Enum.UserInputType.Touch)
            then
                dragInput = input
            end
        end
    )
    game:GetService("UserInputService").InputChanged:Connect(
    function(input)
        if (input == dragInput and dragToggle) then
            updateInput(input)
        end
    end
    )
end

dragify(Frame, Frame)

-- Utility functions
local add = {
    header = function(text)
        local Header = Instance.new("TextLabel")
        local Line = Instance.new("Frame")
        local Line_2 = Instance.new("Frame")

        -- Ensure ScrollingFrame exists
        if not ScrollingFrame then
            warn("ScrollingFrame is not defined!")
            return
        end
        
        -- Ensure UIListLayout exists inside ScrollingFrame
        local UIListLayout = ScrollingFrame:FindFirstChildOfClass("UIListLayout")
        if not UIListLayout then
            warn("UIListLayout is not found inside ScrollingFrame!")
            return
        end

        Header.Parent = ScrollingFrame
        Header.AnchorPoint = Vector2.new(0.5, 0.5)
        Header.BackgroundTransparency = 1
        Header.Size = UDim2.new(0, 460, 0, 29)
        Header.Font = Enum.Font.FredokaOne
        Header.Text = tostring(text)
        Header.TextColor3 = Color3.fromRGB(71, 170, 170)
        Header.TextSize = 18

        -- Correct position calculation
        Header.Position = UDim2.new(0.5, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)

        local textSize = game:GetService("TextService"):GetTextSize(text, 18, Enum.Font.FredokaOne, Vector2.new(math.huge, 29))
        local minLineWidth = 100
        local minSpacing = 15
        local dynamicLineWidth = math.max(minLineWidth, (460 - textSize.X) / 2 - minSpacing)

        Line.Parent = Header
        Line.AnchorPoint = Vector2.new(1, 0.5)
        Line.BackgroundColor3 = Color3.fromRGB(71, 170, 170)
        Line.Position = UDim2.new(0.5, -textSize.X / 2 - minSpacing, 0.5, 0)
        Line.Size = UDim2.new(0, dynamicLineWidth, 0, 3)

        Line_2.Parent = Header
        Line_2.AnchorPoint = Vector2.new(0, 0.5)
        Line_2.BackgroundColor3 = Color3.fromRGB(71, 170, 170)
        Line_2.Position = UDim2.new(0.5, textSize.X / 2 + minSpacing, 0.5, 0)
        Line_2.Size = UDim2.new(0, dynamicLineWidth, 0, 3)
    end,

    text = function(text)
        local Text = Instance.new("TextLabel")

        if not ScrollingFrame then
            warn("ScrollingFrame is not defined!")
            return
        end

        Text.Parent = ScrollingFrame
        Text.AnchorPoint = Vector2.new(0.5, 0.5)
        Text.BackgroundTransparency = 1
        Text.Position = UDim2.new(0.5, 0, 0.24, 0)
        Text.Size = UDim2.new(0, 460, 0, 27)
        Text.Font = Enum.Font.FredokaOne
        Text.TextColor3 = Color3.fromRGB(255, 255, 255)
        Text.TextSize = 15
        Text.Text = tostring(text)

        return {
            new = function(newtext)
                Text.Text = tostring(newtext)
            end
        }
    end,

    Button = function(text, callback)
        local Button = Instance.new("TextButton")
        local UICorner_2 = Instance.new("UICorner")

        if not ScrollingFrame then
            warn("ScrollingFrame is not defined!")
            return
        end

        Button.Parent = ScrollingFrame
        Button.AnchorPoint = Vector2.new(0.5, 0.5)
        Button.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
        Button.Position = UDim2.new(0.52, 0, 0.12, 0)
        Button.Size = UDim2.new(0, 444, 0, 31)
        Button.Font = Enum.Font.FredokaOne
        Button.Text = text
        Button.TextColor3 = Color3.fromRGB(255, 255, 255)
        Button.TextSize = 14

        UICorner_2.CornerRadius = UDim.new(0, 3)
        UICorner_2.Parent = Button

        Button.MouseButton1Click:Connect(callback)
    end,

    Toggle = function(text, default, callback)
    local ToggleFrame = Instance.new("Frame")
    local ToggleTextLabel = Instance.new("TextLabel")
    local Toggle = Instance.new("ImageLabel")
    local Button = Instance.new("TextButton")
    local Circle = Instance.new("ImageLabel")

    -- Ensure ScrollingFrame exists
    if not ScrollingFrame then
        warn("ScrollingFrame is not defined!")
        return
    end

    -- Create Parent Frame (Wrap Text & Toggle together)
    ToggleFrame.Parent = ScrollingFrame
    ToggleFrame.BackgroundTransparency = 1
    ToggleFrame.Size = UDim2.new(0, 200, 0, 22) -- ปรับขนาดให้เหมาะสม
    ToggleFrame.Position = UDim2.new(0.5, -100, 0, 0) -- จัดตำแหน่งกึ่งกลาง

    -- Create Label for Toggle Text (Left Side)
    ToggleTextLabel.Parent = ToggleFrame
    ToggleTextLabel.AnchorPoint = Vector2.new(0, 0.5)
    ToggleTextLabel.BackgroundTransparency = 1.000
    ToggleTextLabel.Size = UDim2.new(0, 50, 1, 0) -- กำหนดขนาดให้พอดี
    ToggleTextLabel.Position = UDim2.new(0, 0, 0.5, 0) -- ชิดซ้าย
    ToggleTextLabel.Font = Enum.Font.FredokaOne
    ToggleTextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleTextLabel.TextSize = 13
    ToggleTextLabel.Text = text

    -- Create Toggle Background (Right Side)
    Toggle.Parent = ToggleFrame
    Toggle.AnchorPoint = Vector2.new(1, 0.5) -- ให้ชิดขวาของ ToggleFrame
    Toggle.BackgroundTransparency = 1.000
    Toggle.Position = UDim2.new(1, 0, 0.5, 0) -- อยู่ทางขวา
    Toggle.Size = UDim2.new(0, 46, 0, 22)
    Toggle.Image = "rbxassetid://3570695787"
    Toggle.ImageColor3 = Color3.fromRGB(200, 200, 200)
    Toggle.ScaleType = Enum.ScaleType.Slice
    Toggle.SliceCenter = Rect.new(100, 100, 100, 100)
    Toggle.SliceScale = 0.120

    -- Create Button
    Button.Parent = Toggle
    Button.BackgroundTransparency = 1.000
    Button.Size = UDim2.new(1, 0, 1, 0)
    Button.TextTransparency = 1.000

    -- Create Circle (Toggle Indicator)
    Circle.Parent = Toggle
    Circle.BackgroundTransparency = 1.000
    Circle.Position = UDim2.new(0, 2, 0, 2)
    Circle.Size = UDim2.new(0, 18, 0, 18)
    Circle.Image = "rbxassetid://3570695787"
    Circle.ScaleType = Enum.ScaleType.Slice
    Circle.SliceCenter = Rect.new(100, 100, 100, 100)
    Circle.SliceScale = 0.120

    -- Toggle Logic
    local toggled = default
    Button.MouseButton1Click:Connect(function()
        toggled = not toggled
        local toggleColor = toggled and Color3.fromRGB(64, 200, 114) or Color3.fromRGB(200, 200, 200)
        local circlePos = toggled and UDim2.new(1, -20, 0, 2) or UDim2.new(0, 2, 0, 2)

        game:GetService("TweenService"):Create(Toggle, TweenInfo.new(0.3), {ImageColor3 = toggleColor}):Play()
        game:GetService("TweenService"):Create(Circle, TweenInfo.new(0.3), {Position = circlePos}):Play()

        if callback then callback(toggled) end
    end)
end  ,
Dropdown = function(text, options, callback)
    local DropdownFrame = Instance.new("Frame")
    local DropdownButton = Instance.new("TextButton")
    local DropdownList = Instance.new("ScrollingFrame")
    local UIListLayout = Instance.new("UIListLayout")
    local isOpen = false

    DropdownFrame.Parent = ScrollingFrame
    DropdownFrame.BackgroundTransparency = 1
    DropdownFrame.Size = UDim2.new(0, 444, 0, 31)

    DropdownButton.Parent = DropdownFrame
    DropdownButton.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    DropdownButton.Size = UDim2.new(1, 0, 1, 0)
    DropdownButton.Font = Enum.Font.FredokaOne
    DropdownButton.Text = text
    DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    DropdownButton.TextSize = 14
    DropdownButton.AutoButtonColor = true

    DropdownList.Parent = DropdownFrame
    DropdownList.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    DropdownList.Size = UDim2.new(1, 0, 0, 0) -- เริ่มต้นปิด
    DropdownList.Position = UDim2.new(0, 0, 1, 0)
    DropdownList.Visible = false
    DropdownList.ScrollBarThickness = 5 -- ✅ แสดงแถบเลื่อน
    DropdownList.ClipsDescendants = true
    DropdownList.AutomaticCanvasSize = Enum.AutomaticSize.Y -- ✅ ให้ขยายตามเนื้อหา (ใหม่)

    UIListLayout.Parent = DropdownList
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 5)

    -- ✅ อัปเดตขนาด CanvasSize ให้สามารถเลื่อนได้
    UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        DropdownList.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
    end)

    local function toggleDropdown()
        isOpen = not isOpen
        DropdownList.Visible = true
        local newSize = isOpen and UDim2.new(1, 0, 0, math.clamp(UIListLayout.AbsoluteContentSize.Y, 30, 200)) or UDim2.new(1, 0, 0, 0)

        TweenService:Create(DropdownList, TweenInfo.new(0.3), {Size = newSize}):Play()
        if not isOpen then
            task.wait(0.3)
            DropdownList.Visible = false
        end
    end

    DropdownButton.MouseButton1Click:Connect(toggleDropdown)

    for _, option in ipairs(options) do
        local OptionButton = Instance.new("TextButton")
        OptionButton.Parent = DropdownList
        OptionButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        OptionButton.Size = UDim2.new(1, 0, 0, 30)
        OptionButton.Font = Enum.Font.FredokaOne
        OptionButton.Text = option
        OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        OptionButton.TextSize = 14
        OptionButton.AutoButtonColor = true

        OptionButton.MouseButton1Click:Connect(function()
            DropdownButton.Text = option
            toggleDropdown()
            if callback then
                callback(option)
            end
        end)
    end
end
}
